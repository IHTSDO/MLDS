tried to move mlds to mysql

Could move db (as detailed below for future reference but ran into some problems wrt liquibase.
the main one is: "createSequence is not supported on mysql" 
http://www.liquibase.org/documentation/changes/create_sequence.html

<createSequence sequenceName="hibernate_sequence"/>

etc.

i.e. simply can't use createsequence. can redo with autoincrement e.g.

http://www.liquibase.org/documentation/changes/add_auto_increment.html

but would require dev work etc.

also column datatypes would need adding eg
columnDataType is required for addNotNullConstraint on mysql,

How to move data from pgsql to mysql:

1) Set up the mysqlworkbench and use it's migration tool to create the tables etc. 
This will write out to a sql file if the right box is ticked etc. e.g. in this case :
migration_script.sql

2) Don't bother with the data migration bit as this fails due to fun with timestamps etc. 
Instead we'll adjust the pg_dump output.

3) On the mlds instance dump just the data :
pg_dump -d mlds --data-only --no-owner --no-acl --attribute-inserts --disable-dollar-quoting --no-tablespaces  > mldsdata.sql

you might then have to rem some postgres specific stuff from the top to the file.... basically down to the INSERT INTO..... VALUES(...) statements

copy sql onto an instance with a local mysql on it... (reason below)
and create tables etc using the sql file:  

/usr/bin/mysql --max_allowed_packet=256M < ./migration_script.sql


4) not entirely sure if this helped or not...
but downloaded  pg2mysql
http://www.lightbox.ca/pg2mysql/pg2mysql-1.9.tar.bz2
If on a recent version of php will need to adjust pg2mysql.inc.php
as you will get: "PHP Fatal error: Call-time pass-by-reference has been removed in"

line 133 from : if(is_array(&$input)) {
to: 	        if(is_array($input)) { 

php pg2mysql_cli.php ./mldsdata.sql mldsmysql.sql innodb

5) Then the file needs to have the key field escaping e.g. sed -i 's/ key,/`key`,/g' mldsmysql.sql

6) then in mysql turn off the foreign key checking (will be global hence the local mysql instance reff'ed in (3)):
SET GLOBAL FOREIGN_KEY_CHECKS=0;

7) import into mysql :  /usr/bin/mysql --max_allowed_packet=256M mlds < ./mldsmysql.sql

8) turn fk'es back on : SET GLOBAL FOREIGN_KEY_CHECKS=1;

9) do a mysql dump :
/usr/bin/mysqldump  --opt --single-transaction --routines --triggers --flush-privileges  mlds > "mysqldumpmlds.sql"

10) Check using utf-8 :  sed -i 's/CHARSET=latin1/CHARSET=utf8/g' mysqldumpmlds.sql

11) import dump into intended host.


Java settings :

will need to change pgsql settings to mysql ones:

mlds_dataSource_ClassName: "com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
mlds_datasource_url: "jdbc:mysql://{{mysql_host}}:3306/{{mlds_dbname}}"

External mysql DB settings:

Use otf_mlds_mysql.yml which uses the external mysql play ( IHTSDO.mysql )

means will need the following in the host var:

#--- IHTSDO.mysql Configuration ---#
mysql_local: false
mysql_version: 5.5
mysql_host: "{{ rdbms.instance }}"
mysql_root_username: "{{ rdbms.username }}"
mysql_root_password: "{{ rdbms.password }}"
mysql_databases:
   - "{{ mlds_dbname }}"

mysql_users:
   - user:
       name: "{{  mlds_user }}"
       password: "{{ mlds_password }}"
       host: "%"
       privs: "{{mlds_dbname}}.*:ALL,GRANT"


mlds_dbname: "dev_mlds"
mlds_user: "dev_mlds"
mlds_password: "PASSWORD_CHANGE_ME"

If using a local db then simply change the rdbms settings above to localhost etc. 
If want to install mysql server locally then set mysql_local to true



